// GENERATED by @edgedb/generate v0.5.3

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _std from "./std";
export type $IssueλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "description": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "is_active": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne, false, false, false, false>;
  "issue_map": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "title": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "owner": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
  "created_at": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, false>;
  "updated_at": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, false>;
  "seqNo": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, false, false, true>;
  "status": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "labels": $.LinkDesc<$Label, $.Cardinality.Many, {}, false, true,  false, false>;
  "links": $.LinkDesc<$Link, $.Cardinality.Many, {}, false, true,  false, false>;
  "<issue[is Label]": $.LinkDesc<$Label, $.Cardinality.Many, {}, false, false,  false, false>;
  "<issue[is Link]": $.LinkDesc<$Link, $.Cardinality.Many, {}, false, false,  false, false>;
  "<issues[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<issue": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<issues": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Issue = $.ObjectType<"default::Issue", $IssueλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $Issue = $.makeType<$Issue>(_.spec, "04d3a377-062e-11ef-b474-0b025b215dca", _.syntax.literal);

const Issue: $.$expr_PathNode<$.TypeSet<$Issue, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Issue, $.Cardinality.Many), null);

export type $LabelλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "owner": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
  "issue": $.LinkDesc<$Issue, $.Cardinality.Many, {}, false, false,  false, false>;
  "<labels[is Issue]": $.LinkDesc<$Issue, $.Cardinality.Many, {}, false, false,  false, false>;
  "<labels[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<labels": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Label = $.ObjectType<"default::Label", $LabelλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Label = $.makeType<$Label>(_.spec, "04d6336d-062e-11ef-92a6-57cffc5b3bc0", _.syntax.literal);

const Label: $.$expr_PathNode<$.TypeSet<$Label, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Label, $.Cardinality.Many), null);

export type $LinkλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "note": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "url": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "issue": $.LinkDesc<$Issue, $.Cardinality.One, {}, false, false,  false, false>;
  "<links[is Issue]": $.LinkDesc<$Issue, $.Cardinality.Many, {}, false, false,  false, false>;
  "<links": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Link = $.ObjectType<"default::Link", $LinkλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $Link = $.makeType<$Link>(_.spec, "04d9960f-062e-11ef-809e-13537cf9657c", _.syntax.literal);

const Link: $.$expr_PathNode<$.TypeSet<$Link, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Link, $.Cardinality.Many), null);

export type $UserλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "displayName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "email": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "uid": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "username": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "issues": $.LinkDesc<$Issue, $.Cardinality.Many, {}, false, true,  false, false>;
  "labels": $.LinkDesc<$Label, $.Cardinality.Many, {}, false, true,  false, false>;
  "<owner[is Issue]": $.LinkDesc<$Issue, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is Label]": $.LinkDesc<$Label, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $User = $.ObjectType<"default::User", $UserλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {email: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {username: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {uid: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $User = $.makeType<$User>(_.spec, "04dd1f10-062e-11ef-af60-1f83d73e28d9", _.syntax.literal);

const User: $.$expr_PathNode<$.TypeSet<$User, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($User, $.Cardinality.Many), null);



export { $Issue, Issue, $Label, Label, $Link, Link, $User, User };

type __defaultExports = {
  "Issue": typeof Issue;
  "Label": typeof Label;
  "Link": typeof Link;
  "User": typeof User
};
const __defaultExports: __defaultExports = {
  "Issue": Issue,
  "Label": Label,
  "Link": Link,
  "User": User
};
export default __defaultExports;
